<?php
/* 
 * Generated by CRUDigniter v3.2 
 * www.crudigniter.com
 */

class Downloads extends Admin_Controller
{
    public function __construct()
    {
        parent::__construct();
        $this->not_logged_in();
        $this->load->model('Model_common');
        $this->load->library('Csvimport');
        // $this->load->library('CSVReader');
        $this->load->helper('file');
    }

    public function index()
    {
        $data['downloads'] = $this->Model_common->getDownloadsData();
        $this->load->view('include/header');
        $this->load->view('downloads/index', $data);
        $this->load->view('include/footer');
    }

    public function add()
    {
        $this->form_validation->set_rules('title', 'Title', 'trim|required');
        $this->form_validation->set_rules('desc', 'Description', 'trim|required');
        $config['upload_path']          = './notices/';
        $config['allowed_types']        = 'PDF|pdf|JPG|jpg|PNG|png|JPEG|jpeg';
        $config['encrypt_name']        = true;
        $this->upload->initialize($config);
        if ($this->form_validation->run() == TRUE && $this->upload->do_upload('upload')) {
            $data = $this->upload->data();
            if ($data['raw_name'] == null) {
                $image = 0;
                $params = array(
                    'downloads_title' => $this->input->post('title'),
                    'downloads_desc' => $this->input->post('desc'),
                    'downloads_links' => $image,
                );
                $this->Model_common->addDownload($params);
                $this->session->set_flashdata('success', '<div class="alert alert-success">Material added successfully.</div>');
                redirect('Downloads/index');
            } else {
                $attachment = base_url('notices/' . $data['raw_name'] . $data['file_ext']);
                $params = array(
                    'downloads_title' => $this->input->post('title'),
                    'downloads_desc' => $this->input->post('desc'),
                    'downloads_links' => $attachment,
                );
                $this->Model_common->addDownload($params);
                $this->session->set_flashdata('success', '<div class="alert alert-success">Material added successfully.</div>');
                redirect('Downloads/index');
            }
        } else {
            $data['upload_error'] = $this->upload->display_errors();
            $this->load->view('include/header');
            $this->load->view('downloads/add', $data);
            $this->load->view('include/footer');
        }
    }


    function editDownload($id)
    {
        $this->form_validation->set_rules('title', 'Title', 'trim|required');
        $this->form_validation->set_rules('desc', 'Description', 'trim|required');
        $config['upload_path'] = './notices/';
        $config['allowed_types'] = 'PDF|pdf|JPG|jpg|PNG|png|JPEG|jpeg';
        $config['encrypt_name'] = true;
        $this->upload->initialize($config);
        $data['downloads'] = $this->Model_common->getDownloadsByID($id);
        if (isset($data['downloads']['iddownloads'])) {
            if ($this->form_validation->run() == TRUE && isset($_POST) && count($_POST) > 0) {
                $this->upload->do_upload('upload');
                $data = $this->upload->data();
                if ($data['raw_name'] == null) {
                    $params = [
                        'downloads_title' => $this->input->post('title'),
                        'downloads_desc' => $this->input->post('desc'),
                    ];
                    $this->Model_common->update_downloads($id, $params);
                    $this->session->set_flashdata(
                        'success',
                        '<div class="alert alert-success">Download details edited successfully </div>'
                    );
                    redirect('Downloads/index');
                } else {
                    $file = base_url('notices/' . $data['raw_name'] . $data['file_ext']);
                    $params = [
                        'downloads_title' => $this->input->post('title'),
                        'downloads_desc' => $this->input->post('desc'),
                        'downloads_links' => $file,
                    ];
                    $this->Model_common->update_downloads($id, $params);
                    $this->session->set_flashdata(
                        'success',
                        '<div class="alert alert-success">Download details edited successfully  </div>'
                    );
                    redirect('Downloads/index');
                }
            } else {
                $data['upload_error'] = $this->upload->display_errors();
                $this->load->view('include/header');
                $this->load->view('downloads/edit', $data);
                $this->load->view('include/footer');
            }
        } else {
            show_error('The downloads details you are trying to edit does not exist.');
        }
    }

    public function removeDownload($id)
    {
        // 
        $data = $this->Model_common->getDownloadsByID($id);
        // check if the announcement details exists before trying to delete it
        if (isset($data['iddownloads'])) {
            $this->Model_common->deleteDownloads($id);
            $this->session->set_flashdata(
                'danger',
                '<div class="alert alert-danger ">Downloads data removed successfully</div>'
            );
            redirect('Downloads/index');
        } else {
            show_error('The announcement details you are trying to delete does not exist.');
        }
    }

    // Notifications
    public function notifications()
    {
        $data['notice'] = $this->Model_common->getNotificationsData();
        $this->load->view('include/header');
        $this->load->view('downloads/notice', $data);
        $this->load->view('include/footer');
    }

    public function addNotifications()
    {
        date_default_timezone_set('Asia/Kolkata');
        $this->form_validation->set_rules('title', 'Title', 'trim|required');
        $this->form_validation->set_rules('desc', 'Description', 'trim|required');
        if ($this->form_validation->run() == TRUE) {
            $params = array(
                'notices_title' => $this->input->post('title'),
                'notices_desc' => $this->input->post('desc'),
                'notices_created' => date('d-m-Y H:i:s'),
            );
            $this->Model_common->addNotices($params);
            $this->session->set_flashdata('success', '<div class="alert alert-success">Notice added successfully.</div>');
            redirect('Downloads/notifications');
        } else {
            $this->load->view('include/header');
            $this->load->view('downloads/addnotice');
            $this->load->view('include/footer');
        }
    }

    public function editNotices($id)
    {
        date_default_timezone_set('Asia/Kolkata');
        $this->form_validation->set_rules('title', 'Title', 'trim|required');
        $this->form_validation->set_rules('desc', 'Description', 'trim|required');
        $data['notices'] = $this->Model_common->getNoticesByID($id);
        if (isset($data['notices']['idnotices'])) {
            if ($this->form_validation->run() == TRUE && isset($_POST) && count($_POST) > 0) {
                $params = [
                    'notices_title' => $this->input->post('title'),
                    'notices_desc' => $this->input->post('desc'),
                    'notices_created' => date('d-m-Y H:i:s'),
                ];
                $this->Model_common->update_notices($id, $params);
                $this->session->set_flashdata(
                    'success',
                    '<div class="alert alert-success">Notifications Edited successfully </div>'
                );
                redirect('Downloads/notifications');
            } else {
                $this->load->view('include/header');
                $this->load->view('downloads/editnotice', $data);
                $this->load->view('include/footer');
            }
        } else {
            show_error('The notices details you are trying to edit does not exist.');
        }
    }


    public function removeNotices($id)
    {
        $data = $this->Model_common->getNoticesByID($id);
        if (isset($data['idnotices'])) {
            $this->Model_common->deleteNotices($id);
            $this->session->set_flashdata(
                'danger',
                '<div class="alert alert-danger ">Notice data removed successfully</div>'
            );
            redirect('Downloads/notifications');
        } else {
            show_error('The notice details you are trying to delete does not exist.');
        }
    }

    // Current affairs
    public function ca()
    {
        $data['ca'] = $this->Model_common->getCAData();
        $this->load->view('include/header');
        $this->load->view('downloads/ca', $data);
        $this->load->view('include/footer');
    }

    public function addCA()
    {
        $this->form_validation->set_rules('title', 'Title', 'trim|required');
        $this->form_validation->set_rules('desc', 'Description', 'trim|required');
        if ($this->form_validation->run() == TRUE) {
            $params = array(
                'currentaffairs_title' => $this->input->post('title'),
                'currentaffairs_desc' => $this->input->post('desc'),
            );
            $this->Model_common->addCA($params);
            $this->session->set_flashdata('success', '<div class="alert alert-success">Current Affairs added successfully.</div>');
            redirect('Downloads/ca');
        } else {
            $this->load->view('include/header');
            $this->load->view('downloads/addca');
            $this->load->view('include/footer');
        }
    }

    public function editCa($id)
    {
        $this->form_validation->set_rules('title', 'Title', 'trim|required');
        $this->form_validation->set_rules('desc', 'Description', 'trim|required');

        $data['current'] = $this->Model_common->getCAByID($id);
        if (isset($data['current']['idcurrentaffairs'])) {
            if ($this->form_validation->run() == TRUE && isset($_POST) && count($_POST) > 0) {
                $params = [
                    'currentaffairs_title' => $this->input->post('title'),
                    'currentaffairs_desc' => $this->input->post('desc'),
                ];
                $this->Model_common->update_ca($id, $params);
                $this->session->set_flashdata(
                    'success',
                    '<div class="alert alert-success">Current affairs edited successfully </div>'
                );
                redirect('Downloads/ca');
            } else {
                $this->load->view('include/header');
                $this->load->view('downloads/editca', $data);
                $this->load->view('include/footer');
            }
        } else {
            show_error('The current affairs details you are trying to edit does not exist.');
        }
    }


    public function removeCA($id)
    {
        $data = $this->Model_common->getCAByID($id);
        if (isset($data['idcurrentaffairs'])) {
            $this->Model_common->deleteCA($id);
            $this->session->set_flashdata(
                'danger',
                '<div class="alert alert-danger ">Current Affairs data removed successfully</div>'
            );
            redirect('Downloads/ca');
        } else {
            show_error('The Current affairs details you are trying to delete does not exist.');
        }
    }

    // Upcoming Exams
    public function ue()
    {
        $data['ue'] = $this->Model_common->getUEData();
        $this->load->view('include/header');
        $this->load->view('downloads/ue', $data);
        $this->load->view('include/footer');
    }

    public function addUE()
    {
        $this->form_validation->set_rules('title', 'Title', 'trim|required');
        $this->form_validation->set_rules('desc', 'Description', 'trim|required');
        $this->form_validation->set_rules('end', 'End Date', 'trim|required');
        $this->form_validation->set_rules('link', 'Link', 'trim|required');
        if ($this->form_validation->run() == TRUE) {
            $params = array(
                'upcomingexams_title' => $this->input->post('title'),
                'upcomingexams_desc' => $this->input->post('desc'),
                'upcomingexams_end' => $this->input->post('end'),
                'upcomingexams_link' => $this->input->post('link')
            );
            $this->Model_common->addUE($params);
            $this->session->set_flashdata('success', '<div class="alert alert-success">upcoming exams data added successfully.</div>');
            redirect('Downloads/ue');
        } else {
            $this->load->view('include/header');
            $this->load->view('downloads/addue');
            $this->load->view('include/footer');
        }
    }

    public function editUE($id)
    {
        $this->form_validation->set_rules('title', 'Title', 'trim|required');
        $this->form_validation->set_rules('desc', 'Description', 'trim|required');
        $this->form_validation->set_rules('end', 'End Date', 'trim|required');
        $this->form_validation->set_rules('link', 'Link', 'trim|required');

        $data['upcoming'] = $this->Model_common->getUEByID($id);
        if (isset($data['upcoming']['idupcomingexams'])) {
            if ($this->form_validation->run() == TRUE && isset($_POST) && count($_POST) > 0) {
                $params = [
                    'upcomingexams_title' => $this->input->post('title'),
                    'upcomingexams_desc' => $this->input->post('desc'),
                    'upcomingexams_end' => $this->input->post('end'),
                    'upcomingexams_link' => $this->input->post('link')
                ];
                $this->Model_common->update_ue($id, $params);
                $this->session->set_flashdata(
                    'success',
                    '<div class="alert alert-success">Upcoming exam edited successfully </div>'
                );
                redirect('Downloads/ue');
            } else {
                $this->load->view('include/header');
                $this->load->view('downloads/editue', $data);
                $this->load->view('include/footer');
            }
        } else {
            show_error('The upcoming exams details you are trying to edit does not exist.');
        }
    }



    public function removeUE($id)
    {
        $data = $this->Model_common->getUEByID($id);
        if (isset($data['idupcomingexams'])) {
            $this->Model_common->deleteUE($id);
            $this->session->set_flashdata(
                'danger',
                '<div class="alert alert-danger ">upcoming exams data removed successfully</div>'
            );
            redirect('Downloads/ue');
        } else {
            show_error('The upcoming exams details you are trying to delete does not exist.');
        }
    }

    //  Exams
    public function exam()
    {
        $data['exam'] = $this->Model_common->getExamsData();
        $this->load->view('include/header');
        $this->load->view('downloads/exam', $data);
        $this->load->view('include/footer');
    }

    public function addExam()
    {
        $this->form_validation->set_rules('title', 'Title', 'trim|required');
        $this->form_validation->set_rules('desc', 'Description', 'trim|required');
        $this->form_validation->set_rules('time', 'Time', 'trim|required');
        $this->form_validation->set_rules('questions', 'Questions', 'trim|required');
        if ($this->form_validation->run() == TRUE) {
            $params = array(
                'exams_name' => $this->input->post('title'),
                'exams_desc' => $this->input->post('desc'),
                'exams_time' => $this->input->post('time') . ':00',
                'exams_questions' => $this->input->post('questions'),
            );
            $this->Model_common->addExam($params);
            $this->session->set_flashdata('success', '<div class="alert alert-success">Exams data added successfully.</div>');
            redirect('Downloads/exam');
        } else {
            $this->load->view('include/header');
            $this->load->view('downloads/addexam');
            $this->load->view('include/footer');
        }
    }

    public function editExam($id)
    {
        $this->form_validation->set_rules('title', 'Title', 'trim|required');
        $this->form_validation->set_rules('desc', 'Description', 'trim|required');
        $this->form_validation->set_rules('time', 'Time', 'trim|required');
        $this->form_validation->set_rules('questions', 'Questions', 'trim|required');
        $data['exams'] = $this->Model_common->getExamByID($id);
        if (isset($data['exams']['idexams'])) {
            if ($this->form_validation->run() == TRUE && isset($_POST) && count($_POST) > 0) {
                $params = [
                    'exams_name' => $this->input->post('title'),
                    'exams_desc' => $this->input->post('desc'),
                    'exams_time' => $this->input->post('time'),
                    'exams_questions' => $this->input->post('questions'),
                ];
                $this->Model_common->update_Exam($id, $params);
                $this->session->set_flashdata(
                    'success',
                    '<div class="alert alert-success">Exam details Edited successfully </div>'
                );
                redirect('Downloads/exam');
            } else {
                $this->load->view('include/header');
                $this->load->view('downloads/editexam', $data);
                $this->load->view('include/footer');
            }
        } else {
            show_error('The exam  details you are trying to edit does not exist.');
        }
    }


    public function removeExam($id)
    {
        $data = $this->Model_common->getExamByID($id);
        if (isset($data['idexams'])) {
            $this->Model_common->deleteExam($id);
            $this->session->set_flashdata(
                'danger',
                '<div class="alert alert-danger ">Exam data removed successfully</div>'
            );
            redirect('Downloads/exam');
        } else {
            show_error('The Exam details you are trying to delete does not exist.');
        }
    }

    public function changeStatus($id)
    {
        $data = $this->Model_common->getExamByID($id);
        if ($data['exams_status'] == '1') {
            $this->Model_common->updateExam($id, '0');
            $this->session->set_flashdata(
                'success',
                '<div class="alert alert-success">Exam status changed successfully</div>'
            );
            redirect('Downloads/exam');
        } else {
            $this->Model_common->updateExam($id, '1');
            $this->session->set_flashdata(
                'success',
                '<div class="alert alert-success">Exam status changed successfully</div>'
            );
            redirect('Downloads/exam');
        }
    }

    // Syllabus
    public function syllabus()
    {
        $data['syllabus'] = $this->Model_common->getSyllabusData();
        $this->load->view('include/header');
        $this->load->view('downloads/syllabus', $data);
        $this->load->view('include/footer');
    }

    public function addsyllabus()
    {
        $data['exam'] = $this->Model_common->getExamsData();
        $this->form_validation->set_rules('exam', 'Exam', 'trim|required');
        $this->form_validation->set_rules('title', 'Title', 'trim|required');
        $this->form_validation->set_rules('desc', 'Description', 'trim|required');
        if ($this->form_validation->run() == TRUE) {
            $params = array(
                'syllabus_idexams' => $this->input->post('exam'),
                'syllabus_title' => $this->input->post('title'),
                'syllabus_desc' => $this->input->post('desc'),
            );
            $this->Model_common->addSyllabus($params);
            $this->session->set_flashdata('success', '<div class="alert alert-success">syllabus data added successfully.</div>');
            redirect('Downloads/syllabus');
        } else {
            $this->load->view('include/header');
            $this->load->view('downloads/addsyllabus', $data);
            $this->load->view('include/footer');
        }
    }

    public function updateSyllabus($id)
    {
        $this->form_validation->set_rules('title', 'Title', 'trim|required');
        $this->form_validation->set_rules('desc', 'Description', 'trim|required');

        $data['sylla'] = $this->Model_common->getSyllabusByID($id);
        if (isset($data['sylla']['idsyllabus'])) {
            if ($this->form_validation->run() == TRUE) {
                $params = [
                    'syllabus_title' => $this->input->post('title'),
                    'syllabus_desc' => $this->input->post('desc'),
                ];
                $this->Model_common->update_syllabus($id, $params);
                $this->session->set_flashdata(
                    'success',
                    '<div class="alert alert-success">Syllabus details Edited successfully </div>'
                );
                redirect('Downloads/syllabus');
            } else {
                $this->load->view('include/header');
                $this->load->view('downloads/editsyllabus', $data);
                $this->load->view('include/footer');
            }
        } else {
            show_error('The syllabus details you are trying to edit does not exist.');
        }
    }


    public function removeSyllabus($id)
    {
        $data = $this->Model_common->getSyllabusByID($id);
        if (isset($data['idsyllabus'])) {
            $this->Model_common->deleteSyllabus($id);
            $this->session->set_flashdata(
                'danger',
                '<div class="alert alert-danger ">Syllabus data removed successfully</div>'
            );
            redirect('Downloads/syllabus');
        } else {
            show_error('The syllabus details you are trying to delete does not exist.');
        }
    }

    // Questions
    public function question()
    {
        $data['question'] = $this->Model_common->getQuestionsData();
        $this->load->view('include/header');
        $this->load->view('downloads/question', $data);
        $this->load->view('include/footer');
    }

    public function addquestion()
    {
        $data['exam'] = $this->Model_common->getExamsData();
        $config['upload_path']          = './questions/';
        $config['allowed_types']        = 'csv|CSV';
        $config['encrypt_name']        = true;
        $this->upload->initialize($config);
        $this->form_validation->set_rules('exam', 'Exam', 'trim|required');
        if ($this->upload->do_upload('upload') && $this->form_validation->run() == TRUE) {
            $udata = $this->upload->data();
            $filepath = base_url('questions/' . $udata['raw_name'] . $udata['file_ext']);
            $csvData = $this->csvimport->get_array('C:\xampp\htdocs\mcqAdmin\questions\\' . $udata['raw_name'] . $udata['file_ext']);
            
            foreach ($csvData as $row) {
                $params = array(
                    'questions_idexams' => $this->input->post('exam'),
                    'questions_title'    =>    $row["questions_title"],
                    'questions_optiona'    =>    $row["questions_optiona"],
                    'questions_optionb'    =>    $row["questions_optionb"],
                    'questions_optionc'    =>    $row["questions_optionc"],
                    'questions_optiond'    =>    $row["questions_optiond"],
                    'questions_answer'    =>    $row["questions_answer"],
                );
                $this->Model_common->addQuestions($params);
            }
            $this->session->set_flashdata('success', '<div class="alert alert-success">syllabus data added successfully.</div>');
            redirect('Downloads/question');
        } else {
            $data['upload_error'] = $this->upload->display_errors();
            $this->load->view('include/header');
            $this->load->view('downloads/addquestion', $data);
            $this->load->view('include/footer');
        }
    }


    public function removequestion($id)
    {
        $data = $this->Model_common->getQuestionsByID($id);
        if (isset($data['idquestions'])) {
            $this->Model_common->deleteQuestions($id);
            $this->session->set_flashdata(
                'danger',
                '<div class="alert alert-danger ">Question data removed successfully</div>'
            );
            redirect('Downloads/question');
        } else {
            show_error('The questions details you are trying to delete does not exist.');
        }
    }

    public function result()
    {
        $data['result'] = $this->Model_common->getResultStudents();
        $this->load->view('include/header');
        $this->load->view('downloads/results', $data);
        $this->load->view('include/footer');
    }

    public function viewResult($exam, $sid)
    {
        $data['users'] = $this->Model_common->getExamByID($exam);
        $data['ans'] = $this->Model_common->getAnswers($exam, $sid);
        $correctans = 0;
        $i = 0;
        foreach ($data['ans'] as $a) {
            $i += 1;
            if ($a['exams_sdata_selected'] == $a['questions_answer']) {
                $correctans += 1;
            }
        }
        $data['solved'] = $i;
        $data['correctans'] = $correctans;
        $this->load->view('include/header');
        $this->load->view('downloads/viewresults', $data);
        $this->load->view('include/footer');
    }

    public function sendEmail()
    {

        $this->form_validation->set_rules('subject', 'Subject', 'required');
        $this->form_validation->set_rules('desc', 'Description', 'required');
        if ($this->form_validation->run() == TRUE) {
            $emails = $this->Model_common->getEmail();
            $this->load->library('email');
            $config = array(
                'protocol' => 'smtp',
                'smtp_host' => 'smtp.hostinger.com',
                'smtp_port' => 587,
                'smtp_user' => 'subscription@studykaro.tech',
                'smtp_pass' => 'Pass@1234',
                'mailtype'  => 'html',
                'charset'   => 'iso-8859-1',
                'wordwrap' => TRUE
            );
            $this->email->initialize($config);
            $this->load->helper('string');
            $this->email->from('subscription@studykaro.tech', 'MCQ - Study Karo Online');
            $this->email->to($emails['email']);
            $this->email->subject($this->input->post('subject'));
            $this->email->message($this->input->post('desc'));
            $this->email->set_newline("\r\n");
            $this->email->send();
            $this->email->print_debugger();
            $this->session->set_flashdata(
                'success',
                '<div class="alert alert-success ">Email sent successfully.</div>'
            );
            redirect('Dashboard/index');
        } else {
            $this->load->view('include/header');
            $this->load->view('downloads/emaileditor');
            $this->load->view('include/footer');
        }
    }
}
